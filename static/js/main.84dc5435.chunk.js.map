{"version":3,"sources":["logo.svg","SMSForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SMSForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","message","to","body","submitting","error","onSubmit","bind","assertThisInitialized","onHandleChange","event","_this2","preventDefault","setState","fetch","method","headers","Accept","Content-Type","JSON","stringify","then","res","json","data","success","name","target","getAttribute","objectSpread","defineProperty","value","react_default","a","createElement","className","htmlFor","type","id","onChange","disabled","Component","App","src","logo","alt","src_SMSForm_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2SC2FzBC,iCArFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,QAAS,CACPC,GAAI,GACJC,KAAM,IAERC,YAAY,EACZC,OAAO,GAETZ,EAAKa,SAAWb,EAAKa,SAASC,KAAdb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAChBA,EAAKgB,eAAiBhB,EAAKgB,eAAeF,KAApBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAXLA,wEAcViB,GAAO,IAAAC,EAAAf,KACdc,EAAME,iBACNhB,KAAKiB,SAAS,CAAET,YAAY,IAC5BU,MAAM,gBAAiB,CACrBC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACRC,eAAgB,oBAElBf,KAAMgB,KAAKC,UAAUxB,KAAKI,MAAMC,WAE/BoB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACAA,EAAKC,QACPd,EAAKE,SAAS,CACZR,OAAO,EACPD,YAAY,EACZH,QAAS,CACPC,GAAI,GACJC,KAAM,MAIVQ,EAAKE,SAAS,CACZR,OAAO,EACPD,YAAY,6CAMPM,GACb,IAAMgB,EAAOhB,EAAMiB,OAAOC,aAAa,QACvChC,KAAKiB,SAAS,CACZZ,QAAQP,OAAAmC,EAAA,EAAAnC,CAAA,GAAME,KAAKI,MAAMC,QAAlBP,OAAAoC,EAAA,EAAApC,CAAA,GAA4BgC,EAAOhB,EAAMiB,OAAOI,2CAKzD,OACEC,EAAAC,EAAAC,cAAA,QACE5B,SAAUV,KAAKU,SACf6B,UAAWvC,KAAKI,MAAMK,MAAQ,iBAAmB,YAEjD2B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,MAAf,OACAJ,EAAAC,EAAAC,cAAA,SACEG,KAAK,MACLX,KAAK,KACLY,GAAG,KACHP,MAAOnC,KAAKI,MAAMC,QAAQC,GAC1BqC,SAAU3C,KAAKa,kBAGnBuB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,QAAf,SACAJ,EAAAC,EAAAC,cAAA,YACER,KAAK,OACLY,GAAG,OACHP,MAAOnC,KAAKI,MAAMC,QAAQE,KAC1BoC,SAAU3C,KAAKa,kBAGnBuB,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASG,SAAU5C,KAAKI,MAAMI,YAA3C,wBA9EcqC,cCcPC,mLAZX,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKS,IAAKC,IAAMT,UAAU,WAAWU,IAAI,SAEzCb,EAAAC,EAAAC,cAACY,EAAD,eAPQL,aCKEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.84dc5435.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from \"react\";\r\nimport \"./SMSForm.css\";\r\nimport { error } from \"util\";\r\nimport { nextTick } from \"q\";\r\n\r\nclass SMSForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      message: {\r\n        to: \"\",\r\n        body: \"\"\r\n      },\r\n      submitting: false,\r\n      error: false\r\n    };\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.onHandleChange = this.onHandleChange.bind(this);\r\n  }\r\n\r\n  onSubmit(event) {\r\n    event.preventDefault();\r\n    this.setState({ submitting: true });\r\n    fetch(\"/api/messages\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/JSON\",\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(this.state.message)\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        if (data.success) {\r\n          this.setState({\r\n            error: false,\r\n            submitting: false,\r\n            message: {\r\n              to: \"\",\r\n              body: \"\"\r\n            }\r\n          });\r\n        } else {\r\n          this.setState({\r\n            error: true,\r\n            submitting: false\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  onHandleChange(event) {\r\n    const name = event.target.getAttribute(\"name\");\r\n    this.setState({\r\n      message: { ...this.state.message, [name]: event.target.value }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        onSubmit={this.onSubmit}\r\n        className={this.state.error ? \"error sms-form\" : \"sms-form\"}\r\n      >\r\n        <div>\r\n          <label htmlFor=\"to\">To:</label>\r\n          <input\r\n            type=\"tel\"\r\n            name=\"to\"\r\n            id=\"to\"\r\n            value={this.state.message.to}\r\n            onChange={this.onHandleChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"body\">Body:</label>\r\n          <textarea\r\n            name=\"body\"\r\n            id=\"body\"\r\n            value={this.state.message.body}\r\n            onChange={this.onHandleChange}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" disabled={this.state.submitting}>\r\n          Send message\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SMSForm;\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport SMSForm from './SMSForm';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\r\n          <SMSForm />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}